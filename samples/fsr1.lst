0001   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002   0000             ; Feedback Shift Register (FSR) Display Demo for the Heathkit ET-3400
0003   0000             ; Microprocessor Trainer, by Rick Nungester 6/22/2010.
0004   0000             ;
0005   0000             ; This program provides a display of a linear feedback shift register.
0006   0000             ; (See http://en.wikipedia.org/wiki/Linear_feedback_shift_register.)
0007   0000             ; For example, a 16-bit FSR with feedback taps at bits 14 and 15, and
0008   0000             ; seed value 1, behaves like this:
0009   0000             ;                    _____
0010   0000             ;     +------------>|     |
0011   0000             ;     |             | XOR |---------------+
0012   0000             ;     | +---------->|_____|               |
0013   0000             ;     | |                                 |
0014   0000             ;     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 <---+
0015   0000             ;     0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0
0016   0000             ;     0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0
0017   0000             ;     ...
0018   0000             ;     0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0
0019   0000             ;     0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0
0020   0000             ;     0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0021   0000             ;     1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 <<< key transition
0022   0000             ;     0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1
0023   0000             ;     0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0
0024   0000             ;     0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0
0025   0000             ;     ...
0026   0000             ;      14  12  10 9 8 7 6 5 4 3 2 1 0 <<< bit #
0027   0000             ;    15  13  11
0028   0000             ;
0029   0000             ; The initial value of the register is $0001.  Each left-shift, the
0030   0000             ; new bit 0 value is bits 14 and 15 exclusive or'd together.  This
0031   0000             ; particular FSR, including its seed of 1, has a repeating cycle of
0032   0000             ; 255 states.
0033   0000             ;
0034   0000             ; The FSR bits are mapped to Heathkit ET-3400 LED segments so the
0035   0000             ; operation of the FSR can be seen.  All the following can be
0036   0000             ; manually changed after the program is loaded into the ET-3400:
0037   0000             ; FSR feedback taps (FSRTAPS), FSR seed value (FSRSEED), mapping
0038   0000             ; of FSR bits to LED segments (FSRTBL), and output delay for each
0039   0000             ; LED display update (FSRWAIT).
0040   0000             ;
0041   0000             ; The FSR is a fixed 32 bits in length, but not all bits need to
0042   0000             ; be mapped to LED segments.  For example, if taps are chosen at
0043   0000             ; bits 0 and 23, an attractive pattern is produced if only bits 0
0044   0000             ; through 23 are mapped to LED segments, and FSR bits 24 through
0045   0000             ; 31 are ignored.
0046   0000             ;
0047   0000             ; To load and execute the program, your ET-3400 must include the
0048   0000             ; optional 256 bytes of RAM in the sockets labeled "RAM (0100)"
0049   0000             ; at the upper-left of the board.
0050   0000             ;
0051   0000             ; This program was inspired by a similar demo program in the Hewlett-
0052   0000             ; Packard 5036A Microprocessor Lab, a one-board trainer based on the
0053   0000             ; Intel 8085 microprocessor.  (That trainer helped trigger my
0054   0000             ; career switch from electrical engineering to software engineering
0055   0000             ; in 1979.)
0056   0000             ;
0057   0000             ; Nice patterns on the ET-3400 (n bits long), tend to have 2 taps, at
0058   0000             ; bits n-1 and n-2, or at n-1 and 0.  This leaves most of the FSR bits
0059   0000             ; (LED segments) untapped, so the bits can be seen "flowing nicely"
0060   0000             ; through those bit postions.  Also, 1 makes a good seed because it
0061   0000             ; starts the LED pattern trace with either a single segment (n-1, n-2
0062   0000             ; feedback) or a "line being drawn" (n-1, 0 feedback).  Cycles that
0063   0000             ; are fairly short (under 1000) are best because they repeat in
0064   0000             ; reasonable time.
0065   0000             ;
0066   0000             ; Good patterns: Feedback at bits 15 and 14, or 15 and 0, seed = 1,
0067   0000             ; makes a cycle length of 255 states.  (This is the image seen on
0068   0000             ; the HP 5036A Microprocessro Lab demo, inverted because there a
0069   0000             ; bit value of 1 means LED segment off instead of on.)  Feedback 
0070   0000             ; at bits 31 and 30, or 31 and 0, seed = 1, makes a cycle length of
0071   0000             ; 1023 states.  15,11,8,6 feedback makes the FSR used in HP Signature
0072   0000             ; Analyzers, with a cycle length of 2^16-1 = 65535.  31,21,1,0 makes
0073   0000             ; a cycle length of 2^32-1 = 4,294,967,295, which would take about
0074   0000             ; 14 years to repeat with the default display timing of 100 ms per
0075   0000             ; state.
0076   0000             ;
0077   0000             ; Development used the TASM cross-assembler(home.comcast.net/~tasm/)
0078   0000             ; and the ET-3400 simulator ("Trainer Simulator" version 1.1 from
0079   0000             ; Pilgrim Works, Bill Lovegrove, www.pilgrimworks.com).  The simulator
0080   0000             ; is no longer supported or available from Pilgrim Works, but is
0081   0000             ; available from tech.groups.yahoo.com/group/ET-3400/.
0082   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083   0000             
0084   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0085   0000             ; ET-3400 constants
0086   0000             ;
0087   0000             USRRAM0 .equ    $0000 ; 197 bytes user RAM ($0000-$00C4)
0088   0000             USRRAM1 .equ    $0100 ; 256 bytes user RAM ($0100-$01FF)
0089   0000             REDIS   .equ    $FCBC ; REset DISplays for successive OUTCH calls
0090   0000             OUTCH   .equ    $FE3A ; OUTput CHaracter to a 7-seg display
0091   0000             
0092   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0093   0000             ; FSRDEMO is the main program, here at address $0000 for ease of
0094   0000             ; remembering and entering on the ET-3400 keypad.  This is the
0095   0000             ; only code I put in USRRAM0, and all the rest is in USRRAM1
0096   0000             ; (taking up almost all its 256 bytes).
0097   0000             ;
0098   0000                     .org    USRRAM0 ; All program code is too big for this RAM block
0099   0000                     .msfirst        ; make TASM assembler ".word" do MC6800 byte ordering
0100   0000             ;
0101   0000 BD 01 00    FSRDEMO JSR     FSRINIT ; Do 1-time initialization
0102   0003 BD 01 26    FSRLOOP JSR     FSRMAP  ; Map FSR bits to LED display segments
0103   0006 BD 01 6E            JSR     FSROUT  ; Output to LED displays
0104   0009 BD 01 90            JSR     FSRDLY  ; Pause to see one output pattern
0105   000C BD 01 96            JSR     FSRSHFT ; Shift the FSR to make a new FSR value
0106   000F 20 F2               BRA     FSRLOOP ; Repeat
0107   0011             
0108   0011             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0109   0011             ; Constants, Lookup Tables, and Variables.  (The TASM assembler uses
0110   0011             ; .byte and .word to define values in memory, and .block to set aside
0111   0011             ; uninitialized space.)
0112   0011             ;
0113   0011             ; global vars
0114   0011             FSRVAL  .block  4       ; FSR value, 32-bits
0115   0015             LEDS    .block  6       ; 6 LED displays, OUTCH data, right-to-left
0116   001B             
0117   001B             ; global constants
0118   001B 01 02 04 08 FSRP2   .byte   $01,$02,$04,$08
0119   001F 10 20 40 80         .byte   $10,$20,$40,$80 ; 2^0..2^7 bitmasks
0120   0023             
0121   0023             ; FRSINIT constant
0122   0023 00 00 00 01 FSRSEED .word   $0000,$0001
0123   0027             
0124   0027             ; FSRGET vars
0125   0027             FSRBYTE .block  1       ; one byte of the FSR
0126   0028             
0127   0028             ; FSRSHFT vars, constants
0128   0028             FSRBIT0 .block  1       ; 0 or 1, next FSR bit 0 value after shift
0129   0029             FSRTAPC .block  1       ; FSR feedback tap counter
0130   002A 00          FSRTAPS .byte   0       ; FSR feedback taps (6 max)
0131   002B 0F                  .byte   15
0132   002C             FSRTAPE .equ    $       ; table end address, for finding table length
0133   002C                     .block  6-(FSRTAPE-FSRTAPS) ; extra for experiments, 6 max
0134   0030 02          FSRTAPN .byte   FSRTAPE-FSRTAPS ; number of taps for program to use
0135   0031             
0136   0031             ; FSRDEL constant
0137   0031 00 01       FSRWAIT .word   $0001   ; display delay (ET-3400 $1008, simulator $0001)
0138   0033             
0139   0033             ; FSRMAP vars
0140   0033             BITCNT  .block  1       ; FSRVAL bit index counter
0141   0034             FSRBIT  .block  1       ; one bit of the FSR ($00 or $01)
0142   0035             FSRDEST .block  1       ; destination of FSRBIT in LEDS
0143   0036             FSRMAPX .block  2       ; saved index register
0144   0038             ;
0145   0038             ; FSRTBL defines the mapping of FSR bits to ET-3400 display segments.
0146   0038             ; Alternate patterns are given in a separate file.  Given the
0147   0038             ; required ET-3400 OUTCH (OUTput CHaracter) bit mapping of
0148   0038             ;      6
0149   0038             ;    +---+
0150   0038             ;   1|   |5
0151   0038             ;    +-0-+
0152   0038             ;   2|   |4
0153   0038             ;    +---+ .7
0154   0038             ;      3
0155   0038             ; and the desired mapping of FSR bits to display segments in this
0156   0038             ; 16-bit pattern as used on HP 5036A Microprocessor Lab (except that
0157   0038             ; its defect of having bits 8..15 in positions 9..15,8 below, is fixed):
0158   0038             ;     10        9         1         2
0159   0038             ;   +---+     +---+     +---+     +---+     +---+     +---+
0160   0038             ; 11|   |     |   |8   0|   |     |   |3    |   |     |   |
0161   0038             ;   +---+     +---+     +---+     +---+     +---+     +---+
0162   0038             ; 12|   |     |   |15  7|   |     |   |4    |   |     |   |
0163   0038             ;   +---+     +---+     +---+     +---+     +---+     +---+
0164   0038             ;     13        14        6         5
0165   0038             ; the resulting mapping of FSR bits to digit (d) and bit (b) is
0166   0038             ;                  dddbbb ; digit (5 left, 0 right) and bit (7 MS, 0 LS)
0167   0038 19          FSRTBL  .byte   %00011001 ; FSR bit  0 maps to digit 3, segment 1
0168   0039 1E                  .byte   %00011110 ;          1
0169   003A 16                  .byte   %00010110 ;          2
0170   003B 15                  .byte   %00010101 ;          3
0171   003C 14                  .byte   %00010100 ;          4
0172   003D 13                  .byte   %00010011 ;          5
0173   003E 1B                  .byte   %00011011 ;          6
0174   003F 1A                  .byte   %00011010 ;          7
0175   0040 25                  .byte   %00100101 ;          8
0176   0041 26                  .byte   %00100110 ;          9
0177   0042 2E                  .byte   %00101110 ;         10
0178   0043 29                  .byte   %00101001 ;         11
0179   0044 2A                  .byte   %00101010 ;         12
0180   0045 2B                  .byte   %00101011 ;         13
0181   0046 23                  .byte   %00100011 ;         14
0182   0047 24                  .byte   %00100100 ; FSR bit 15 maps to digit 4, segment 4
0183   0048             FSRTBL1 .equ    $         ; table end address, for finding table length
0184   0048             ;
0185   0048             ; Pad FSRTBL to 32 bytes total, for manual experimentation after the
0186   0048             ; program is loaded into the ET-3400.  FSRTBL2 gives the actual number
0187   0048             ; of table bytes for the program to use.  If the table is manually
0188   0048             ; extended, the value of FSRTBL2 must be increased accordingly.
0189   0048             ;
0190   0048                     .block  32-(FSRTBL1-FSRTBL)
0191   0058 10          FSRTBL2 .byte   FSRTBL1-FSRTBL  ; table size used by the program
0192   0059             
0193   0059             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0194   0059             ; All subroutines follow, taking up almost all of the optional ET-3400
0195   0059             ; RAM space (256 bytes).
0196   0059             ;
0197   0100                     .org    USRRAM1
0198   0100             
0199   0100             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0200   0100             ; FSRINIT does one-time setup before the program's infinite loop.
0201   0100             ;
0202   0100 7F 00 15    FSRINIT CLR     LEDS+0  ; Init all LEDS values, all segments off
0203   0103 7F 00 16            CLR     LEDS+1
0204   0106 7F 00 17            CLR     LEDS+2
0205   0109 7F 00 18            CLR     LEDS+3
0206   010C 7F 00 19            CLR     LEDS+4
0207   010F 7F 00 1A            CLR     LEDS+5
0208   0112 BD 01 6E            JSR     FSROUT
0209   0115             
0210   0115 96 26               LDAA    FSRSEED+3 ; Initialize FSR seed
0211   0117 97 11               STAA    FSRVAL+0  ; LS byte
0212   0119 96 25               LDAA    FSRSEED+2
0213   011B 97 12               STAA    FSRVAL+1
0214   011D 96 24               LDAA    FSRSEED+1
0215   011F 97 13               STAA    FSRVAL+2
0216   0121 96 23               LDAA    FSRSEED+0
0217   0123 97 14               STAA    FSRVAL+3  ; MS byte
0218   0125 39                  RTS
0219   0126             
0220   0126             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0221   0126             ; FSRMAP maps the FSR bits (FSRVAL, 32 bits max) to their designated LED
0222   0126             ; display segments (LEDS, 6 bytes, 48 possible LED segments), based on
0223   0126             ; the assignments in table FSRTBL.
0224   0126             ;
0225   0126 4F          FSRMAP  CLRA
0226   0127 97 33               STAA    BITCNT    ; A = BITCNT = 0
0227   0129             
0228   0129 BD 01 D5    FSRMAP1 JSR     FSRGET    ; A = BITCNT, fetch that FSR bit
0229   012C 97 34               STAA    FSRBIT    ; FSRBIT = 0 or 1
0230   012E             
0231   012E 96 33               LDAA    BITCNT    ; Find FSRBIT's destination in LEDS
0232   0130 CE 00 37            LDX     #FSRTBL-1
0233   0133 08          FSRMAP2 INX
0234   0134 4A                  DECA
0235   0135 2A FC               BPL     FSRMAP2
0236   0137 A6 00               LDAA    0,X
0237   0139 97 35               STAA    FSRDEST   ; FSRDEST = 00dddbbb LEDS destination
0238   013B 44                  LSRA
0239   013C 44                  LSRA
0240   013D 44                  LSRA              ; A = byte offset into LEDS (0..5)
0241   013E CE 00 14            LDX     #LEDS-1
0242   0141 08          FSRMAP3 INX
0243   0142 4A                  DECA
0244   0143 2A FC               BPL     FSRMAP3
0245   0145 DF 36               STX     FSRMAPX   ; FSRMAPX = address of destination LEDS byte
0246   0147             
0247   0147 96 35               LDAA    FSRDEST
0248   0149 84 07               ANDA    #$07      ; A = bit # of destination bit
0249   014B CE 00 1A            LDX     #FSRP2-1
0250   014E 08          FSRMAP4 INX
0251   014F 4A                  DECA
0252   0150 2A FC               BPL     FSRMAP4
0253   0152 A6 00               LDAA    0,X       ; A = bit mask for LEDS (1 1-bit, 7 0-bits)
0254   0154             
0255   0154 DE 36               LDX     FSRMAPX   ; X = addr of LEDS byte to merge back into
0256   0156 7D 00 34            TST     FSRBIT    ; Clearing (off) or setting (on) an LED segment?
0257   0159 27 04               BEQ     FSRMAP5   ; If clearing an LEDS bit, branch
0258   015B             
0259   015B AA 00               ORAA    0,X       ; Set the desired LEDS bit/segment
0260   015D 20 03               BRA     FSRMAP6
0261   015F             
0262   015F 43          FSRMAP5 COMA              ; Clear the desired LEDS bit/segment
0263   0160 A4 00               ANDA    0,X
0264   0162             
0265   0162 A7 00       FSRMAP6 STAA    0,X       ; Store the merged-in segment into LEDS
0266   0164 7C 00 33            INC     BITCNT    ; Done with all desired FSR bit mappings?
0267   0167 96 33               LDAA    BITCNT
0268   0169 91 58               CMPA    FSRTBL2
0269   016B 2D BC               BLT     FSRMAP1   ; If not, branch up (with A = BITCNT)
0270   016D 39                  RTS               ; If so, return
0271   016E             
0272   016E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0273   016E             ; FSROUT outputs all 6 7-segment LED displays from the contents of the
0274   016E             ; LEDS bytes.
0275   016E             ;
0276   016E BD FC BC    FSROUT  JSR     REDIS   ; prepare for output to leftmost 7-seg display
0277   0171 96 1A               LDAA    LEDS+5
0278   0173 BD FE 3A            JSR     OUTCH   ; leftmost display of 6
0279   0176 96 19               LDAA    LEDS+4
0280   0178 BD FE 3A            JSR     OUTCH
0281   017B 96 18               LDAA    LEDS+3
0282   017D BD FE 3A            JSR     OUTCH
0283   0180 96 17               LDAA    LEDS+2
0284   0182 BD FE 3A            JSR     OUTCH
0285   0185 96 16               LDAA    LEDS+1
0286   0187 BD FE 3A            JSR     OUTCH
0287   018A 96 15               LDAA    LEDS+0
0288   018C BD FE 3A            JSR     OUTCH   ; rightmost display of 6
0289   018F 39                  RTS
0290   0190             
0291   0190             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292   0190             ; FRSDLY delays to see one output pattern.
0293   0190             ;
0294   0190 DE 31       FSRDLY  LDX     FSRWAIT
0295   0192 09          FSRDLY1 DEX
0296   0193 26 FD               BNE     FSRDLY1
0297   0195 39                  RTS
0298   0196             
0299   0196             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0300   0196             ; FSRSHFT does 1 left-shift of the 32-bit FSR, shifting into bit #0 the
0301   0196             ; XOR of the feedback taps defined in table FSRTAPS.
0302   0196             ;
0303   0196 7F 00 28    FSRSHFT CLR     FSRBIT0   ; Define bit #0 of next FSR state.
0304   0199 7F 00 29            CLR     FSRTAPC
0305   019C 4F                  CLRA              ; A = FSRTAPC = 0 = feedback tap counter
0306   019D             
0307   019D CE 00 29    FSRSHF1 LDX     #FSRTAPS-1 ; Grab FSRTAPS[FSRTAPC] table entry
0308   01A0 08          FSRSHF2 INX
0309   01A1 4A                  DECA
0310   01A2 2A FC               BPL     FSRSHF2
0311   01A4             
0312   01A4 A6 00               LDAA    0,X       ; A = feedback tap bit #
0313   01A6 BD 01 D5            JSR     FSRGET    ; A = feedback tap bit (0 or 1)
0314   01A9 9B 28               ADDA    FSRBIT0
0315   01AB 97 28               STAA    FSRBIT0   ; FSRBIT0 = sum of feedback bits so far
0316   01AD 7C 00 29            INC     FSRTAPC   ; FSRTAPC = # feedback bits summed
0317   01B0 96 29               LDAA    FSRTAPC
0318   01B2 91 30               CMPA    FSRTAPN   ; Done summing all feedback bits?
0319   01B4 26 E7               BNE     FSRSHF1   ; If not, branch up (A = FSRTAPC)
0320   01B6             
0321   01B6 96 28               LDAA    FSRBIT0   ; A = sum of all feedback tap bits
0322   01B8 84 01               ANDA    #1
0323   01BA 97 28               STAA    FSRBIT0   ; FSRBIT0 = XOR of all feedback taps (done)
0324   01BC             
0325   01BC 78 00 11            ASL    FSRVAL+0   ; shift 32-bit FSR left one bit
0326   01BF             
0327   01BF             ; There is a bug in the ET-3400 simulator that I am using to develop this
0328   01BF             ; program.  The trainer is no longer supported, and the bug is being
0329   01BF             ; avoided.  The simulator bug is that "ROL <address>" does not rotate
0330   01BF             ; through the Carry bit as it should.  To demonstrate, do the following
0331   01BF             ; on the simulator and ET-3400 and see different results.  RESET, AUTO,
0332   01BF             ; 0000, 00, 0d, 79, 00, 00, RESET, PC, CHAN, 0001, SS, SS, EXAM, 0000.
0333   01BF             ; This clears address $0000 to value $00, enters program "SEC, ROL $0000"
0334   01BF             ; at address $0001, then executes the two program steps. SEC sets the
0335   01BF             ; Carry Bit. The ROL should rotate this bit into the value at address
0336   01BF             ; $0000. The ET-3400 correctly shows "01" at address $0000, but the
0337   01BF             ; simulator incorrectly shows "00".
0338   01BF             ;
0339   01BF             ;       ROL    FSRVAL+1     ; THIS WON'T WORK ON THE SIMULATOR,
0340   01BF             ;       ROL    FSRVAL+2
0341   01BF             ;       ROL    FSRVAL+3     ; but what follows will.
0342   01BF             
0343   01BF 96 12               LDAA   FSRVAL+1
0344   01C1 49                  ROLA
0345   01C2 97 12               STAA   FSRVAL+1
0346   01C4             
0347   01C4 96 13               LDAA   FSRVAL+2
0348   01C6 49                  ROLA
0349   01C7 97 13               STAA   FSRVAL+2
0350   01C9             
0351   01C9 96 14               LDAA   FSRVAL+3
0352   01CB 49                  ROLA
0353   01CC 97 14               STAA   FSRVAL+3
0354   01CE             
0355   01CE 96 28               LDAA   FSRBIT0      ; merge in the new bit 0
0356   01D0 9B 11               ADDA   FSRVAL
0357   01D2 97 11               STAA   FSRVAL
0358   01D4 39                  RTS
0359   01D5             
0360   01D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361   01D5             ; FSRGET accepts an FSR bit # in ACC A, and returns that bit in ACC A
0362   01D5             ; right-justified (value $00 or $01).
0363   01D5             ;
0364   01D5 16          FSRGET  TAB               ; B = desired FSR bit number, for later use
0365   01D6 44                  LSRA
0366   01D7 44                  LSRA
0367   01D8 44                  LSRA              ; A = FSR byte # (0..3)
0368   01D9 CE 00 10            LDX     #FSRVAL-1 ; Start one address back, for initial INX
0369   01DC 08          FSRGET1 INX               ; first-pass, X points at FSRVAL (LS byte)
0370   01DD 4A                  DECA              ; decrement A, increment X, until right byte
0371   01DE 2A FC               BPL     FSRGET1
0372   01E0             
0373   01E0 A6 00               LDAA    0,X
0374   01E2 97 27               STAA    FSRBYTE   ; FSRBYTE contains the bit we want
0375   01E4 17                  TBA               ; A = desired FSR bit # (0..31)
0376   01E5 84 07               ANDA    #$07      ; A = desired FSR bit # in FSRBYTE (0..7)
0377   01E7 CE 00 1A            LDX     #FSRP2-1
0378   01EA 08          FSRGET2 INX
0379   01EB 4A                  DECA
0380   01EC 2A FC               BPL     FSRGET2
0381   01EE E6 00               LDAB    0,X       ; B = bit mask to test desired FSR bit
0382   01F0 4F                  CLRA              ; assume return value = 0 until find otherwise
0383   01F1 D5 27               BITB    FSRBYTE   ; desired FSR bit = 0?
0384   01F3 27 02               BEQ     FSRGET3   ; if so, branch (return 0)
0385   01F5 86 01               LDAA    #1        ; if not, return 1
0386   01F7 39          FSRGET3 RTS
0387   01F8             
0388   01F8                     .END



Label        Value      Label        Value      Label        Value
------------------      ------------------      ------------------
BITCNT        0033      FSRDEMO       0000      FSRLOOP       0003      
FSRVAL        0011      FSRP2         001B      FSRSEED       0023      
FSRBYTE       0027      FSRBIT0       0028      FSRTAPC       0029      
FSRTAPS       002A      FSRTAPE       002C      FSRTAPN       0030      
FSRWAIT       0031      FSRBIT        0034      FSRDEST       0035      
FSRMAPX       0036      FSRTBL        0038      FSRTBL1       0048      
FSRTBL2       0058      FSRINIT       0100      FSRMAP        0126      
FSRMAP1       0129      FSRMAP2       0133      FSRMAP3       0141      
FSRMAP4       014E      FSRMAP5       015F      FSRMAP6       0162      
FSROUT        016E      FSRDLY        0190      FSRDLY1       0192      
FSRSHFT       0196      FSRSHF1       019D      FSRSHF2       01A0      
FSRGET        01D5      FSRGET1       01DC      FSRGET2       01EA      
FSRGET3       01F7      LEDS          0015      OUTCH         FE3A      
REDIS         FCBC      USRRAM0       0000      USRRAM1       0100      

tasm: Number of errors = 0
